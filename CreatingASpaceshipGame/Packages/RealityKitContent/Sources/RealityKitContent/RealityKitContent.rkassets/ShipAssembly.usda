#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root" (
    customData = {
        float3 rotationEulerHint = (0, 0, 0)
    }
    references = None
)
{
    reorder nameChildren = ["JetMaterial", "Exploded", "Intact"]
    quatf xformOp:orient = (1, 0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Material "JetMaterial" (
        references = None
    )
    {
        float inputs:Intensity = 0.829 (
            customData = {
                dictionary realitykit = {
                    float2 positionInSubgraph = (-867.4375, 112.02344)
                    float2 sizeInSubgraph = (122, 53)
                    int stackingOrderInSubgraph = 381
                }
            }
        )
        token outputs:mtlx:surface.connect = </Root/JetMaterial/UnlitSurface.outputs:out>
        token outputs:realitykit:vertex
        float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (299.25, 99.5)
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)
        int ui:nodegraph:realitykit:subgraphOutputs:stackingOrder = 334

        def Shader "UnlitSurface"
        {
            uniform token info:id = "ND_realitykit_unlit_surfaceshader"
            bool inputs:applyPostProcessToneMap = 0
            color3f inputs:color.connect = </Root/JetMaterial/Ramptb.outputs:out>
            bool inputs:hasPremultipliedAlpha = 0
            float inputs:opacity.connect = </Root/JetMaterial/Add.outputs:out>
            float inputs:opacityThreshold
            token outputs:out
            float2 ui:nodegraph:node:pos = (31.292969, 81.22266)
            float2 ui:nodegraph:node:size = (194.5, 181)
            int ui:nodegraph:node:stackingOrder = 335
        }

        def Shader "Texcoord"
        {
            uniform token info:id = "ND_texcoord_vector2"
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-1077.5223, 54.516205)
            float2 ui:nodegraph:node:size = (180.5, 53)
            int ui:nodegraph:node:stackingOrder = 378
        }

        def Shader "Extract"
        {
            uniform token info:id = "ND_extract_vector2"
            float2 inputs:in.connect = </Root/JetMaterial/Texcoord.outputs:out>
            int inputs:index = 1
            float outputs:out
            float2 ui:nodegraph:node:pos = (-856.1758, 52.597656)
            float2 ui:nodegraph:node:size = (129.5, 40)
            int ui:nodegraph:node:stackingOrder = 379
        }

        def Shader "Remap"
        {
            uniform token info:id = "ND_remap_float"
            float inputs:in.connect = </Root/JetMaterial/Extract.outputs:out>
            float inputs:inhigh = 0
            float inputs:inlow = 0.574
            float inputs:inlow.connect = </Root/JetMaterial.inputs:Intensity>
            float inputs:outhigh = 1
            float inputs:outlow
            float outputs:out
            float2 ui:nodegraph:node:pos = (-726.2031, 129.19531)
            float2 ui:nodegraph:node:size = (94, 181)
            int ui:nodegraph:node:stackingOrder = 49
        }

        def Shader "Ramptb" (
            references = None
        )
        {
            uniform token info:id = "ND_ramptb_color3"
            float2 inputs:texcoord.connect = </Root/JetMaterial/Combine2.outputs:out>
            color3f inputs:valueb = (0.37728855, 0.45849583, 1) (
                colorSpace = "srgb_displayp3"
            )
            color3f inputs:valuet = (0.53382623, 0.94589096, 1) (
                colorSpace = "srgb_displayp3"
            )
            color3f outputs:out
            float2 ui:nodegraph:node:pos = (-287.78125, -88.265625)
            float2 ui:nodegraph:node:size = (148.5, 145)
            int ui:nodegraph:node:stackingOrder = 380
        }

        def Shader "Constant"
        {
            uniform token info:id = "ND_constant_vector2"
            float2 inputs:value = (0, 0)
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-394.02344, 138.01562)
            float2 ui:nodegraph:node:size = (154, 53)
            int ui:nodegraph:node:stackingOrder = 288
            string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:value"]
        }

        def Shader "Combine2"
        {
            uniform token info:id = "ND_combine2_vector2"
            float inputs:in1
            float inputs:in2.connect = </Root/JetMaterial/Add.outputs:out>
            float2 outputs:out
            float2 ui:nodegraph:node:pos = (-467.15234, -53.66797)
            float2 ui:nodegraph:node:size = (144.5, 53)
            int ui:nodegraph:node:stackingOrder = 319
        }

        def Shader "Noise2D"
        {
            uniform token info:id = "ND_noise2d_float"
            float inputs:amplitude
            float inputs:pivot
            float2 inputs:texcoord
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1002.77344, -75.55469)
            float2 ui:nodegraph:node:size = (148.5, 145)
            int ui:nodegraph:node:stackingOrder = 329
        }

        def Shader "Add"
        {
            uniform token info:id = "ND_add_float"
            float inputs:in1.connect = </Root/JetMaterial/Multiply_1.outputs:out>
            float inputs:in2.connect = </Root/JetMaterial/Remap.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-601.4922, 3.9023438)
            float2 ui:nodegraph:node:size = (61.5, 36.5)
            int ui:nodegraph:node:stackingOrder = 320
        }

        def Shader "TriplanarProjection"
        {
            uniform token info:id = "ND_triplanarprojection_float"
            float2 ui:nodegraph:node:pos = (-1298.1562, -172.91406)
            float2 ui:nodegraph:node:size = (170, 217)
            int ui:nodegraph:node:stackingOrder = 311
        }

        def Shader "Position"
        {
            uniform token info:id = "ND_position_vector3"
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-997.03125, -383.8789)
            float2 ui:nodegraph:node:size = (133.5, 40)
            int ui:nodegraph:node:stackingOrder = 302
        }

        def Shader "Noise3D"
        {
            uniform token info:id = "ND_noise3d_float"
            float inputs:amplitude
            float3 inputs:position.connect = </Root/JetMaterial/Multiply.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-752.85547, -302.0547)
            float2 ui:nodegraph:node:size = (105, 145)
            int ui:nodegraph:node:stackingOrder = 338
        }

        def Shader "Multiply"
        {
            uniform token info:id = "ND_multiply_vector3"
            float3 inputs:in1.connect = </Root/JetMaterial/Add_1.outputs:out>
            float3 inputs:in2 = (1, 20, 5)
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-889.4844, -272.23828)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 374
        }

        def Shader "Multiply_1"
        {
            uniform token info:id = "ND_multiply_float"
            float inputs:in1.connect = </Root/JetMaterial/Noise3D.outputs:out>
            float inputs:in2 = 0.295
            float inputs:in2.connect = </Root/JetMaterial/Flicker_Intensity.outputs:out>
            float outputs:out
            float2 ui:nodegraph:node:pos = (-569.2422, -204.16797)
            float2 ui:nodegraph:node:size = (60, 36)
            int ui:nodegraph:node:stackingOrder = 340
        }

        def Shader "Time"
        {
            uniform token info:id = "ND_time_float"
            float outputs:out
            float2 ui:nodegraph:node:pos = (-1078.7812, -320.22656)
            float2 ui:nodegraph:node:size = (122.5, 53)
            int ui:nodegraph:node:stackingOrder = 313
        }

        def Shader "Add_1"
        {
            uniform token info:id = "ND_add_vector3FA"
            prepend float3 inputs:in1.connect = </Root/JetMaterial/Position.outputs:out>
            float inputs:in2.connect = </Root/JetMaterial/Time.outputs:out>
            float3 outputs:out
            float2 ui:nodegraph:node:pos = (-931.65234, -330.1328)
            float2 ui:nodegraph:node:size = (61.5, 36.5)
            int ui:nodegraph:node:stackingOrder = 308
        }

        def Shader "Flicker_Intensity"
        {
            uniform token info:id = "ND_constant_float"
            float inputs:value = 0.435
            float outputs:out
            float2 ui:nodegraph:node:pos = (-739.7344, -180.09766)
            float2 ui:nodegraph:node:size = (187.5, 53)
            int ui:nodegraph:node:stackingOrder = 341
        }
    }

    def "Exploded" (
        customData = {
            float3 rotationEulerHint = (0, 3.1415927, 0)
        }
        references = @geometry/Exploded.usdc@
    )
    {
        quatf xformOp:orient = (-4.371139e-8, 0, 1, 0)
        float3 xformOp:scale = (0.043, 0.043, 0.043)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "backthingy" (
            references = None
        )
        {
            over "DarkGraySG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/DarkGraySG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            over "SilverMetallicSG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/SilverMetallicSG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }

        over "EngineRight" (
            references = None
        )
        {
            over "DarkGraySG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/DarkGraySG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            over "SilverMetallicSG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/SilverMetallicSG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            over "BlackOutSG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/BlackOutSG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }

        over "EngineLeft" (
            references = None
        )
        {
            over "DarkGraySG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/DarkGraySG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            over "SilverMetallicSG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/SilverMetallicSG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            over "BlackOutSG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/BlackOutSG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }

        over "bigwing" (
            references = None
        )
        {
            over "DarkGraySG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/DarkGraySG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            over "SilverMetallicSG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/SilverMetallicSG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }

        over "bigwing1" (
            references = None
        )
        {
            over "DarkGraySG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/DarkGraySG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            over "SilverMetallicSG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/SilverMetallicSG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }

        over "smallWing" (
            references = None
        )
        {
            over "DarkGraySG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/DarkGraySG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            over "SilverMetallicSG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/SilverMetallicSG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }

        over "SmallWing"
        {
            over "DarkGraySG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/DarkGraySG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            over "SilverMetallicSG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/SilverMetallicSG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }

        over "polySurface5"
        {
            over "DarkGraySG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/DarkGraySG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            over "SilverMetallicSG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/SilverMetallicSG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            over "BlackOutSG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/BlackOutSG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }

        over "polySurface13"
        {
            over "DarkGraySG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/DarkGraySG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            over "SilverMetallicSG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/SilverMetallicSG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }

        over "polySurface14"
        {
            over "DarkGraySG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/DarkGraySG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            over "SilverMetallicSG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/SilverMetallicSG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }

        over "polySurface12"
        {
            over "DarkGraySG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/DarkGraySG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            over "windowSG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/windowSG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            over "SilverMetallicSG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/SilverMetallicSG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            over "BlackOutSG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/BlackOutSG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }

        over "polySurface3" (
            references = None
        )
        {
            over "DarkGraySG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/DarkGraySG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            over "SilverMetallicSG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/SilverMetallicSG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }

        over "polySurface15" (
            references = None
        )
        {
            over "DarkGraySG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/DarkGraySG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }

            over "SilverMetallicSG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/SilverMetallicSG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }

        over "polySurface17" (
            prepend apiSchemas = ["MaterialBindingAPI"]
            references = None
        )
        {
            rel material:binding = </Root/Intact/Fighter_ship/Looks/DarkGraySG> (
                bindMaterialAs = "weakerThanDescendants"
            )
        }

        over "polySurface19" (
            prepend apiSchemas = ["MaterialBindingAPI"]
            references = None
        )
        {
            rel material:binding = </Root/Intact/Fighter_ship/Looks/DarkGraySG> (
                bindMaterialAs = "weakerThanDescendants"
            )
        }

        over "polySurface18" (
            references = None
        )
        {
            over "DarkGraySG" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                references = None
            )
            {
                rel material:binding = </Root/Intact/Fighter_ship/Looks/DarkGraySG> (
                    bindMaterialAs = "weakerThanDescendants"
                )
            }
        }

        over "Looks" (
            active = false
        )
        {
        }
    }

    def Xform "Intact" (
        active = true
        customData = {
            float3 rotationEulerHint = (-1.5707964, 0, 0)
        }
        references = None
    )
    {
        reorder nameChildren = ["HeadLight", "LeftEngine", "RightEngine", "Fighter_ship", "Hook"]
        quatf xformOp:orient = (0.70710677, -0.70710677, 0, 0)
        float3 xformOp:scale = (0.1, 0.1, 0.1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "HeadLight" (
            active = true
            references = None
        )
        {
            quatf xformOp:orient = (0.70710677, 0.70710677, -4.006716e-14, -8.594525e-15)
            float3 xformOp:scale = (10, 10, 10)
            float3 xformOp:translate = (8.438229e-15, 0.5464036, 3.9500993e-8)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Xform "LeftEngine" (
            active = true
            references = None
        )
        {
            reorder nameChildren = ["Exhaust", "ParticleEmitter", "WingTip"]
            quatf xformOp:orient = (0.70710677, 0.70710677, 5.9051423e-15, -2.3141548e-15)
            float3 xformOp:scale = (0.9999999, 0.9999999, 0.9999999)
            float3 xformOp:translate = (-0.18952379, -0.36293355, -0.05944916)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Xform "ParticleEmitter" (
                references = None
            )
            {
                quatf xformOp:orient = (0.99999994, 0, 0, 0)
                float3 xformOp:scale = (0.99999994, 0.99999994, 0.99999994)
                float3 xformOp:translate = (-3.3527616e-7, -2.4959448e-7, 0.03967509)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def RealityKitComponent "VFXEmitter"
                {
                    token info:id = "RealityKit.VFXEmitter"

                    def RealityKitStruct "currentState"
                    {
                        token birthDirection = "Local"
                        token birthLocation = "Surface"
                        int64 burstCount = 0
                        float3 emissionDirection = (0, 0, 0)
                        double emissionDuration = 0.2
                        double emissionDurationVariation = 0
                        token emitterShape = "Plane"
                        double idleDuration = 0
                        double idleDurationVariation = 0
                        bool isLocal = 0
                        bool isSpawningEnabled = 1
                        bool loops = 1
                        float particleSpeed = 0.4
                        float particleSpeedVariation = 0.2
                        float3 shapeSize = (0.01, 0.01, 0.01)
                        bool spawnInheritParentColor = 0
                        token spawnOccasion = "OnBirth"
                        float spawnSpreadFactor = 0
                        float spawnSpreadFactorVariation = 0
                        float spawnVelocityFactor = 1
                        double warmupDuration = 0

                        def RealityKitStruct "mainEmitter"
                        {
                            float3 acceleration = (0, 0, 0)
                            float3 billboardAxis = (0, 0, 0)
                            token billboardMode = "Billboard"
                            float birthRate = 2000
                            float birthRateVariation = 0
                            token blendMode = "Additive"
                            float colorEvolutionPower = 0.611
                            int64 columnCount = 4
                            float dampingFactor = 0
                            float4 endColorA = (0.13930583, 0.2553808, 1, 1)
                            float4 endColorB = (1, 1, 1, 1)
                            float frameRate = 10.85231
                            bool isAnimated = 0
                            bool isLightingEnabled = 0
                            float noiseAnimationSpeed = 0
                            float noiseScale = 1
                            float noiseStrength = 0
                            token opacityOverLife = "GradualFadeInOut"
                            float particleAngle = 0
                            float particleAngleVariation = 0
                            float particleAngularVelocity = 0
                            float particleAngularVelocityVariation = 0
                            asset particleImage = @Particle.png@
                            double particleLifeSpan = 0.2
                            double particleLifeSpanVariation = 0.02
                            float particleMass = 1
                            float particleMassVariation = 0.1
                            float particleSize = 0.004
                            float particleSizeVariation = 0
                            float3 radialGravityCenter = (1, 1, 0)
                            float radialGravityStrength = 0
                            int64 rowCount = 4
                            token sortOrder = "IncreasingDepth"
                            float spreadingAngle = 0
                            float4 startColorA = (0.36899728, 0.7653276, 1, 1)
                            float4 startColorB = (1, 1, 1, 1)
                            float stretchFactor = 2.406
                            bool useEndColor = 1
                            bool useEndColorRange = 0
                            bool useStartColorRange = 0
                            float3 vortexDirection = (0, 1, 0)
                            float vortexStrength = 0
                        }

                        def RealityKitStruct "spawnedEmitter"
                        {
                            float3 acceleration = (0, 0, 0)
                            token billboardMode = "Billboard"
                            float birthRate = 100
                            float birthRateVariation = 0
                            token blendMode = "Additive"
                            float colorEvolutionPower = 1
                            int64 columnCount = 4
                            float dampingFactor = 1
                            float4 endColorA = (0.0013309671, 0.03458923, 1, 1)
                            float4 endColorB = (0.11386989, 0.0064959256, 0.10626237, 1)
                            float frameRate = 16
                            bool isAnimated = 0
                            bool isLightingEnabled = 0
                            float noiseAnimationSpeed = 2.075
                            float noiseScale = 1.734
                            float noiseStrength = 0.138
                            token opacityOverLife = "LinearFadeOut"
                            float particleAngle = 0
                            float particleAngleVariation = 0
                            float particleAngularVelocity = 0
                            float particleAngularVelocityVariation = 0
                            asset particleImage = @Particle.png@
                            double particleLifeSpan = 1
                            double particleLifeSpanVariation = 0
                            float particleMass = 1
                            float particleMassVariation = 0
                            float particleSize = 0.01
                            float particleSizeVariation = 0.001
                            float3 radialGravityCenter = (0, 0, 0)
                            float radialGravityStrength = 0
                            int64 rowCount = 4
                            float sizeMultiplierAtEndOfLifespan = 1.3
                            float sizeMultiplierAtEndOfLifespanPower = 0
                            token sortOrder = "IncreasingID"
                            float spreadingAngle = 0
                            float4 startColorA = (1, 1, 1, 0.021816539)
                            float4 startColorB = (1, 1, 1, 1)
                            float stretchFactor = 0
                            bool useEndColor = 0
                            bool useEndColorRange = 0
                            bool useStartColorRange = 0
                            float3 vortexDirection = (0, 1, 0)
                            float vortexStrength = 0
                        }
                    }
                }
            }

            def Xform "WingTip" (
                customData = {
                    float3 rotationEulerHint = (-0.0006905935, 5.8793324e-11, -1.346969e-10)
                }
                references = None
            )
            {
                quatf xformOp:orient = (0.99999994, -0.00034523712, 2.941484e-11, -6.732667e-11)
                float3 xformOp:scale = (0.9999997, 0.9999997, 0.9999997)
                float3 xformOp:translate = (-0.3365491, 0.11538229, -0.1574747)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def RealityKitComponent "VFXEmitter"
                {
                    token info:id = "RealityKit.VFXEmitter"

                    def RealityKitStruct "currentState"
                    {
                        token birthDirection = "Local"
                        token birthLocation = "Surface"
                        int64 burstCount = 0
                        float3 emissionDirection = (0, 0, 0)
                        double emissionDuration = 0.2
                        double emissionDurationVariation = 0
                        token emitterShape = "Plane"
                        double idleDuration = 0
                        double idleDurationVariation = 0
                        bool isLocal = 0
                        bool isSpawningEnabled = 1
                        bool loops = 1
                        float particleSpeed = 0.4
                        float particleSpeedVariation = 0.2
                        float3 shapeSize = (0.01, 0.01, 0.01)
                        bool spawnInheritParentColor = 0
                        token spawnOccasion = "OnBirth"
                        float spawnSpreadFactor = 0
                        float spawnSpreadFactorVariation = 0
                        float spawnVelocityFactor = 1
                        double warmupDuration = 0

                        def RealityKitStruct "mainEmitter"
                        {
                            float3 acceleration = (0, 0, 0)
                            float3 billboardAxis = (0, 0, 0)
                            token billboardMode = "Billboard"
                            float birthRate = 2000
                            float birthRateVariation = 0
                            token blendMode = "Additive"
                            float colorEvolutionPower = 0.611
                            int64 columnCount = 4
                            float dampingFactor = 0
                            float4 endColorA = (0.015293812, 0.015294626, 0.015294192, 1)
                            float4 endColorB = (1, 1, 1, 1)
                            float frameRate = 10.85231
                            bool isAnimated = 0
                            bool isLightingEnabled = 0
                            float noiseAnimationSpeed = 0
                            float noiseScale = 1
                            float noiseStrength = 0
                            token opacityOverLife = "GradualFadeInOut"
                            float particleAngle = 0
                            float particleAngleVariation = 0
                            float particleAngularVelocity = 0
                            float particleAngularVelocityVariation = 0
                            asset particleImage = @Particle.png@
                            double particleLifeSpan = 0.1
                            double particleLifeSpanVariation = 0.02
                            float particleMass = 1
                            float particleMassVariation = 0.1
                            float particleSize = 0.004
                            float particleSizeVariation = 0
                            float3 radialGravityCenter = (1, 1, 0)
                            float radialGravityStrength = 0
                            int64 rowCount = 4
                            token sortOrder = "IncreasingDepth"
                            float spreadingAngle = 0
                            float4 startColorA = (0, 0, 0, 1)
                            float4 startColorB = (1, 1, 1, 1)
                            float stretchFactor = 2.406
                            bool useEndColor = 1
                            bool useEndColorRange = 0
                            bool useStartColorRange = 0
                            float3 vortexDirection = (0, 1, 0)
                            float vortexStrength = 0
                        }

                        def RealityKitStruct "spawnedEmitter"
                        {
                            float3 acceleration = (0, 0, 0)
                            token billboardMode = "Billboard"
                            float birthRate = 200
                            float birthRateVariation = 0
                            token blendMode = "Additive"
                            float colorEvolutionPower = 1
                            int64 columnCount = 4
                            float dampingFactor = 1
                            float4 endColorA = (0.0013309671, 0.03458923, 1, 1)
                            float4 endColorB = (0.11386989, 0.0064959256, 0.10626237, 1)
                            float frameRate = 16
                            bool isAnimated = 0
                            bool isLightingEnabled = 0
                            float noiseAnimationSpeed = 2.075
                            float noiseScale = 1.734
                            float noiseStrength = 0.138
                            token opacityOverLife = "LinearFadeOut"
                            float particleAngle = 0
                            float particleAngleVariation = 0
                            float particleAngularVelocity = 0
                            float particleAngularVelocityVariation = 0
                            asset particleImage = @Particle.png@
                            double particleLifeSpan = 3
                            double particleLifeSpanVariation = 0
                            float particleMass = 1
                            float particleMassVariation = 0
                            float particleSize = 0.005
                            float particleSizeVariation = 0.001
                            float3 radialGravityCenter = (0, 0, 0)
                            float radialGravityStrength = 0
                            int64 rowCount = 4
                            float sizeMultiplierAtEndOfLifespan = 0.2
                            float sizeMultiplierAtEndOfLifespanPower = 0
                            token sortOrder = "IncreasingID"
                            float spreadingAngle = 0
                            float4 startColorA = (1, 1, 1, 0.021816539)
                            float4 startColorB = (1, 1, 1, 1)
                            float stretchFactor = 0
                            bool useEndColor = 0
                            bool useEndColorRange = 0
                            bool useStartColorRange = 0
                            float3 vortexDirection = (0, 1, 0)
                            float vortexStrength = 0
                        }
                    }
                }
            }

            def "Exhaust" (
                active = true
                customData = {
                    float3 rotationEulerHint = (0, 3.1415927, 0)
                }
                references = @geometry/Exhaust_left.usdz@
            )
            {
                quatf xformOp:orient = (-4.371138e-8, -7.114623e-15, 0.99999994, 2.9802308e-8)
                float3 xformOp:scale = (0.4300001, 0.4300001, 0.4300001)
                float3 xformOp:translate = (0, 7.4505815e-9, -0.051878784)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "geo" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    references = None
                )
                {
                    rel material:binding = </Root/JetMaterial> (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                }

                over "Looks" (
                    active = false
                )
                {
                }
            }
        }

        def Xform "RightEngine" (
            active = true
            references = None
        )
        {
            reorder nameChildren = ["Fighter_ship_1", "Exhaust", "ParticleEmitter", "WingTip"]
            quatf xformOp:orient = (0.70710677, 0.70710677, 5.9051423e-15, -2.3141548e-15)
            float3 xformOp:scale = (0.9999999, 0.9999999, 0.9999999)
            float3 xformOp:translate = (0.18887769, -0.3710643, -0.063333355)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Xform "ParticleEmitter" (
                references = None
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (0.9999999, 0.9999999, 0.9999999)
                float3 xformOp:translate = (0, -2.4586916e-7, 0.039675146)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def RealityKitComponent "VFXEmitter"
                {
                    token info:id = "RealityKit.VFXEmitter"

                    def RealityKitStruct "currentState"
                    {
                        token birthDirection = "Local"
                        token birthLocation = "Surface"
                        int64 burstCount = 0
                        float3 emissionDirection = (0, 0, 0)
                        double emissionDuration = 0.2
                        double emissionDurationVariation = 0
                        token emitterShape = "Plane"
                        double idleDuration = 0
                        double idleDurationVariation = 0
                        bool isLocal = 0
                        bool isSpawningEnabled = 1
                        bool loops = 1
                        float particleSpeed = 0.4
                        float particleSpeedVariation = 0.2
                        float3 shapeSize = (0.01, 0.01, 0.01)
                        bool spawnInheritParentColor = 0
                        token spawnOccasion = "OnBirth"
                        float spawnSpreadFactor = 0
                        float spawnSpreadFactorVariation = 0
                        float spawnVelocityFactor = 1
                        double warmupDuration = 0

                        def RealityKitStruct "mainEmitter"
                        {
                            float3 acceleration = (0, 0, 0)
                            float3 billboardAxis = (0, 0, 0)
                            token billboardMode = "Billboard"
                            float birthRate = 2000
                            float birthRateVariation = 0
                            token blendMode = "Additive"
                            float colorEvolutionPower = 0.611
                            int64 columnCount = 4
                            float dampingFactor = 0
                            float4 endColorA = (0.13930583, 0.2553808, 1, 1)
                            float4 endColorB = (1, 1, 1, 1)
                            float frameRate = 10.85231
                            bool isAnimated = 0
                            bool isLightingEnabled = 0
                            float noiseAnimationSpeed = 0
                            float noiseScale = 1
                            float noiseStrength = 0
                            token opacityOverLife = "GradualFadeInOut"
                            float particleAngle = 0
                            float particleAngleVariation = 0
                            float particleAngularVelocity = 0
                            float particleAngularVelocityVariation = 0
                            asset particleImage = @Particle.png@
                            double particleLifeSpan = 0.2
                            double particleLifeSpanVariation = 0.02
                            float particleMass = 1
                            float particleMassVariation = 0.1
                            float particleSize = 0.004
                            float particleSizeVariation = 0
                            float3 radialGravityCenter = (1, 1, 0)
                            float radialGravityStrength = 0
                            int64 rowCount = 4
                            token sortOrder = "IncreasingDepth"
                            float spreadingAngle = 0
                            float4 startColorA = (0.36899728, 0.7653276, 1, 1)
                            float4 startColorB = (1, 1, 1, 1)
                            float stretchFactor = 2.406
                            bool useEndColor = 1
                            bool useEndColorRange = 0
                            bool useStartColorRange = 0
                            float3 vortexDirection = (0, 1, 0)
                            float vortexStrength = 0
                        }

                        def RealityKitStruct "spawnedEmitter"
                        {
                            float3 acceleration = (0, 0, 0)
                            token billboardMode = "Billboard"
                            float birthRate = 100
                            float birthRateVariation = 0
                            token blendMode = "Additive"
                            float colorEvolutionPower = 1
                            int64 columnCount = 4
                            float dampingFactor = 1
                            float4 endColorA = (0.0013309671, 0.03458923, 1, 1)
                            float4 endColorB = (0.11386989, 0.0064959256, 0.10626237, 1)
                            float frameRate = 16
                            bool isAnimated = 0
                            bool isLightingEnabled = 0
                            float noiseAnimationSpeed = 2.075
                            float noiseScale = 1.734
                            float noiseStrength = 0.138
                            token opacityOverLife = "LinearFadeOut"
                            float particleAngle = 0
                            float particleAngleVariation = 0
                            float particleAngularVelocity = 0
                            float particleAngularVelocityVariation = 0
                            asset particleImage = @Particle.png@
                            double particleLifeSpan = 1
                            double particleLifeSpanVariation = 0
                            float particleMass = 1
                            float particleMassVariation = 0
                            float particleSize = 0.01
                            float particleSizeVariation = 0.001
                            float3 radialGravityCenter = (0, 0, 0)
                            float radialGravityStrength = 0
                            int64 rowCount = 4
                            float sizeMultiplierAtEndOfLifespan = 1.3
                            float sizeMultiplierAtEndOfLifespanPower = 0
                            token sortOrder = "IncreasingID"
                            float spreadingAngle = 0
                            float4 startColorA = (1, 1, 1, 0.021816539)
                            float4 startColorB = (1, 1, 1, 1)
                            float stretchFactor = 0
                            bool useEndColor = 0
                            bool useEndColorRange = 0
                            bool useStartColorRange = 0
                            float3 vortexDirection = (0, 1, 0)
                            float vortexStrength = 0
                        }
                    }
                }
            }

            def Xform "WingTip" (
                customData = {
                    float3 rotationEulerHint = (-0.0006905935, 5.8793324e-11, -1.346969e-10)
                }
                references = None
            )
            {
                quatf xformOp:orient = (0.99999994, -0.00034526695, 2.9417378e-11, -6.73325e-11)
                float3 xformOp:scale = (0.9999997, 0.9999997, 0.9999997)
                float3 xformOp:translate = (0.33149424, 0.11926652, -0.16560544)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def RealityKitComponent "VFXEmitter"
                {
                    token info:id = "RealityKit.VFXEmitter"

                    def RealityKitStruct "currentState"
                    {
                        token birthDirection = "Local"
                        token birthLocation = "Surface"
                        int64 burstCount = 0
                        float3 emissionDirection = (0, 0, 0)
                        double emissionDuration = 0.2
                        double emissionDurationVariation = 0
                        token emitterShape = "Plane"
                        double idleDuration = 0
                        double idleDurationVariation = 0
                        bool isLocal = 0
                        bool isSpawningEnabled = 1
                        bool loops = 1
                        float particleSpeed = 0.4
                        float particleSpeedVariation = 0.2
                        float3 shapeSize = (0.01, 0.01, 0.01)
                        bool spawnInheritParentColor = 0
                        token spawnOccasion = "OnBirth"
                        float spawnSpreadFactor = 0
                        float spawnSpreadFactorVariation = 0
                        float spawnVelocityFactor = 1
                        double warmupDuration = 0

                        def RealityKitStruct "mainEmitter"
                        {
                            float3 acceleration = (0, 0, 0)
                            float3 billboardAxis = (0, 0, 0)
                            token billboardMode = "Billboard"
                            float birthRate = 2000
                            float birthRateVariation = 0
                            token blendMode = "Additive"
                            float colorEvolutionPower = 0.611
                            int64 columnCount = 4
                            float dampingFactor = 0
                            float4 endColorA = (0.015293812, 0.015294626, 0.015294192, 1)
                            float4 endColorB = (1, 1, 1, 1)
                            float frameRate = 10.85231
                            bool isAnimated = 0
                            bool isLightingEnabled = 0
                            float noiseAnimationSpeed = 0
                            float noiseScale = 1
                            float noiseStrength = 0
                            token opacityOverLife = "GradualFadeInOut"
                            float particleAngle = 0
                            float particleAngleVariation = 0
                            float particleAngularVelocity = 0
                            float particleAngularVelocityVariation = 0
                            asset particleImage = @Particle.png@
                            double particleLifeSpan = 0.1
                            double particleLifeSpanVariation = 0.02
                            float particleMass = 1
                            float particleMassVariation = 0.1
                            float particleSize = 0.004
                            float particleSizeVariation = 0
                            float3 radialGravityCenter = (1, 1, 0)
                            float radialGravityStrength = 0
                            int64 rowCount = 4
                            token sortOrder = "IncreasingDepth"
                            float spreadingAngle = 0
                            float4 startColorA = (0, 0, 0, 1)
                            float4 startColorB = (1, 1, 1, 1)
                            float stretchFactor = 2.406
                            bool useEndColor = 1
                            bool useEndColorRange = 0
                            bool useStartColorRange = 0
                            float3 vortexDirection = (0, 1, 0)
                            float vortexStrength = 0
                        }

                        def RealityKitStruct "spawnedEmitter"
                        {
                            float3 acceleration = (0, 0, 0)
                            token billboardMode = "Billboard"
                            float birthRate = 200
                            float birthRateVariation = 0
                            token blendMode = "Additive"
                            float colorEvolutionPower = 1
                            int64 columnCount = 4
                            float dampingFactor = 1
                            float4 endColorA = (0.0013309671, 0.03458923, 1, 1)
                            float4 endColorB = (0.11386989, 0.0064959256, 0.10626237, 1)
                            float frameRate = 16
                            bool isAnimated = 0
                            bool isLightingEnabled = 0
                            float noiseAnimationSpeed = 2.075
                            float noiseScale = 1.734
                            float noiseStrength = 0.138
                            token opacityOverLife = "LinearFadeOut"
                            float particleAngle = 0
                            float particleAngleVariation = 0
                            float particleAngularVelocity = 0
                            float particleAngularVelocityVariation = 0
                            asset particleImage = @Particle.png@
                            double particleLifeSpan = 3
                            double particleLifeSpanVariation = 0
                            float particleMass = 1
                            float particleMassVariation = 0
                            float particleSize = 0.005
                            float particleSizeVariation = 0.001
                            float3 radialGravityCenter = (0, 0, 0)
                            float radialGravityStrength = 0
                            int64 rowCount = 4
                            float sizeMultiplierAtEndOfLifespan = 0.2
                            float sizeMultiplierAtEndOfLifespanPower = 0
                            token sortOrder = "IncreasingID"
                            float spreadingAngle = 0
                            float4 startColorA = (1, 1, 1, 0.021816539)
                            float4 startColorB = (1, 1, 1, 1)
                            float stretchFactor = 0
                            bool useEndColor = 0
                            bool useEndColorRange = 0
                            bool useStartColorRange = 0
                            float3 vortexDirection = (0, 1, 0)
                            float vortexStrength = 0
                        }
                    }
                }
            }

            def "Exhaust" (
                active = true
                customData = {
                    float3 rotationEulerHint = (0, 3.1415927, 0)
                }
                references = @geometry/Exhaust_right.usdz@
            )
            {
                quatf xformOp:orient = (-4.371138e-8, -7.114623e-15, 0.99999994, 2.9802308e-8)
                float3 xformOp:scale = (0.4300001, 0.4300001, 0.4300001)
                float3 xformOp:translate = (4.4703487e-8, -2.9802326e-8, -0.06234965)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "geo" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Root/JetMaterial> (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                }

                over "Looks" (
                    active = false
                )
                {
                }
            }
        }

        def "Fighter_ship" (
            active = true
            customData = {
                float3 rotationEulerHint = (-1.570796, 3.1415927, 0)
            }
            references = @geometry/Fighter_ship.usdz@
        )
        {
            quatf xformOp:orient = (-1.083822e-7, 1.0838222e-7, 0.70710677, 0.7071067)
            float3 xformOp:scale = (0.42999995, 0.42999995, 0.42999995)
            float3 xformOp:translate = (-3.984223e-8, 0.16765998, -8.7877964e-8)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "chasis" (
                references = None
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "DarkGraySG" (
                    references = None
                )
                {
                }

                over "windowSG" (
                    references = None
                )
                {
                }

                over "SilverMetallicSG" (
                    references = None
                )
                {
                }

                over "BlackOutSG" (
                    references = None
                )
                {
                }
            }

            over "littlewigs" (
                references = None
            )
            {
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            over "grill" (
                references = None
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            over "backthingy" (
                references = None
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            over "tubes" (
                references = None
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "DarkGraySG" (
                    references = None
                )
                {
                }
            }

            over "BottomBits" (
                references = None
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "DarkGraySG" (
                    references = None
                )
                {
                }
            }

            over "Looks" (
                references = None
            )
            {
                over "DarkGraySG" (
                    references = None
                )
                {
                    token inputs:frame:stPrimvarName = "st" (
                        customData = {
                            dictionary realitykit = {
                                bool hide = 1
                            }
                        }
                    )
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                    float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 112.75)

                    over "DarkGray"
                    {
                        float inputs:metallic = 0
                        float inputs:occlusion = 1
                        float inputs:occlusion.connect = </Root/Intact/Fighter_ship/Looks/DarkGraySG/occlusion.outputs:r>
                        float inputs:roughness = 0.9
                    }

                    def Shader "occlusion"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @textures/Fighter_Ship_ao.png@
                        float2 inputs:st.connect = </Root/Intact/Fighter_ship/Looks/DarkGraySG/occlusion/TexCoordReader.outputs:result>
                        float outputs:r

                        def Shader "TexCoordReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </Root/Intact/Fighter_ship/Looks/DarkGraySG.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }
                    }
                }

                over "windowSG" (
                    references = None
                )
                {
                    token outputs:mtlx:surface.connect = </Root/Intact/Fighter_ship/Looks/windowSG/PBRSurface.outputs:out>
                    token outputs:realitykit:vertex
                    token outputs:surface.connect = </Root/Intact/Fighter_ship/Looks/windowSG/window.outputs:surface>
                    float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 112.75)

                    over "window" (
                        active = false
                    )
                    {
                    }

                    def Shader "PBRSurface" (
                        references = None
                    )
                    {
                        uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                        float inputs:ambientOcclusion
                        color3f inputs:baseColor = (0.04119154, 0.04119154, 0.04119154) (
                            colorSpace = "lin_srgb"
                        )
                        color3f inputs:emissiveColor.connect = </Root/Intact/Fighter_ship/Looks/windowSG/Mix.outputs:out>
                        bool inputs:hasPremultipliedAlpha
                        float inputs:metallic
                        float3 inputs:normal
                        float inputs:roughness = 0.18082
                        float inputs:specular
                        token outputs:out
                        float2 ui:nodegraph:node:pos = (-275.39062, 58.89258)
                        int ui:nodegraph:node:stackingOrder = 7
                    }

                    def Shader "Mix" (
                        references = None
                    )
                    {
                        uniform token info:id = "ND_mix_color3"
                        color3f inputs:bg
                        color3f inputs:fg = (1, 0.852812, 0.05962121) (
                            colorSpace = "srgb_displayp3"
                        )
                        float inputs:mix.connect = </Root/Intact/Fighter_ship/Looks/windowSG/HoverState.outputs:intensity>
                        color3f outputs:out
                        float2 ui:nodegraph:node:pos = (-494.90234, -53.24414)
                        int ui:nodegraph:node:stackingOrder = 23
                        string[] ui:nodegraph:realitykit:node:attributesShowingChildren = ["inputs:bg"]
                    }

                    def Shader "HoverState" (
                        references = None
                    )
                    {
                        uniform token info:id = "ND_realitykit_hover_state"
                        float outputs:intensity
                        float3 outputs:position
                        float outputs:timeSinceHoverStart
                        float2 ui:nodegraph:node:pos = (-708.3789, 39.79492)
                        int ui:nodegraph:node:stackingOrder = 17
                    }
                }

                over "ThrusterSG" (
                    references = None
                )
                {
                    token inputs:frame:stPrimvarName = "st" (
                        customData = {
                            dictionary realitykit = {
                                bool hide = 1
                            }
                        }
                    )
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                    float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 112.75)

                    def Shader "occlusion"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @textures/Fighter_Ship_ao.png@
                        float2 inputs:st.connect = </Root/Intact/Fighter_ship/Looks/ThrusterSG/occlusion/TexCoordReader.outputs:result>
                        float outputs:r

                        def Shader "TexCoordReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </Root/Intact/Fighter_ship/Looks/ThrusterSG.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }
                    }

                    over "Thruster"
                    {
                        float inputs:occlusion = 1
                        float inputs:occlusion.connect = </Root/Intact/Fighter_ship/Looks/ThrusterSG/occlusion.outputs:r>
                    }
                }

                over "SilverMetallicSG" (
                    references = None
                )
                {
                    token inputs:frame:stPrimvarName = "st" (
                        customData = {
                            dictionary realitykit = {
                                bool hide = 1
                            }
                        }
                    )
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex

                    over "SilverMetallic"
                    {
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0
                        color3f inputs:diffuseColor = (0.7514615, 0.70476025, 0.59534633) (
                            colorSpace = "lin_srgb"
                        )
                        float inputs:metallic = 0.1
                        float inputs:occlusion = 1
                        float inputs:occlusion.connect = </Root/Intact/Fighter_ship/Looks/SilverMetallicSG/occlusion.outputs:r>
                        float inputs:roughness = 0.8
                    }

                    def Shader "occlusion"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @textures/Fighter_Ship_ao.png@
                        float2 inputs:st.connect = </Root/Intact/Fighter_ship/Looks/SilverMetallicSG/occlusion/TexCoordReader.outputs:result>
                        float outputs:r

                        def Shader "TexCoordReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </Root/Intact/Fighter_ship/Looks/SilverMetallicSG.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }
                    }
                }

                over "BlackOutSG" (
                    references = None
                )
                {
                    token inputs:frame:stPrimvarName = "st" (
                        customData = {
                            dictionary realitykit = {
                                bool hide = 1
                            }
                        }
                    )
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                    float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 112.75)

                    def Shader "occlusion"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @textures/Fighter_Ship_ao.png@
                        float2 inputs:st.connect = </Root/Intact/Fighter_ship/Looks/BlackOutSG/occlusion/TexCoordReader.outputs:result>
                        float outputs:r

                        def Shader "TexCoordReader"
                        {
                            uniform token info:id = "UsdPrimvarReader_float2"
                            token inputs:varname.connect = </Root/Intact/Fighter_ship/Looks/BlackOutSG.inputs:frame:stPrimvarName>
                            float2 outputs:result
                        }
                    }

                    over "BlackOut"
                    {
                        float inputs:occlusion.connect = </Root/Intact/Fighter_ship/Looks/BlackOutSG/occlusion.outputs:r>
                    }
                }

                over "lightSG" (
                    references = None
                )
                {
                    token outputs:mtlx:surface.connect = </Root/Intact/Fighter_ship/Looks/lightSG/PBRSurface.outputs:out>
                    token outputs:realitykit:vertex
                    token outputs:surface.connect = </Root/Intact/Fighter_ship/Looks/lightSG/light.outputs:surface>
                    float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 112.75)

                    over "light" (
                        active = false
                    )
                    {
                    }

                    def Shader "PBRSurface" (
                        references = None
                    )
                    {
                        uniform token info:id = "ND_realitykit_pbr_surfaceshader"
                        color3f inputs:baseColor = (1, 1, 1) (
                            colorSpace = "srgb_displayp3"
                        )
                        color3f inputs:emissiveColor = (1, 1, 1) (
                            colorSpace = "srgb_displayp3"
                        )
                        color3f inputs:emissiveColor.connect = </Root/Intact/Fighter_ship/Looks/lightSG/Mix.outputs:out>
                        bool inputs:hasPremultipliedAlpha
                        float3 inputs:normal
                        float inputs:roughness
                        token outputs:out
                        float2 ui:nodegraph:node:pos = (-313.21094, -5.9902344)
                        int ui:nodegraph:node:stackingOrder = 24
                    }

                    def Shader "Mix" (
                        references = None
                    )
                    {
                        uniform token info:id = "ND_mix_color3"
                        color3f inputs:bg = (1, 1, 1) (
                            colorSpace = "srgb_displayp3"
                        )
                        color3f inputs:fg = (1, 0.97203773, 0.21429972) (
                            colorSpace = "srgb_displayp3"
                        )
                        float inputs:mix.connect = </Root/Intact/Fighter_ship/Looks/lightSG/HoverState.outputs:intensity>
                        color3f outputs:out
                        float2 ui:nodegraph:node:pos = (-522.7461, -131.35742)
                        int ui:nodegraph:node:stackingOrder = 23
                    }

                    def Shader "HoverState" (
                        references = None
                    )
                    {
                        uniform token info:id = "ND_realitykit_hover_state"
                        float outputs:intensity
                        float3 outputs:position
                        float2 ui:nodegraph:node:pos = (-757.8086, -112.041016)
                        int ui:nodegraph:node:stackingOrder = 16
                    }
                }
            }

            over "bigwings" (
                references = None
            )
            {
            }

            over "Engines" (
                references = None
            )
            {
                over "EngineRight" (
                    references = None
                )
                {
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    float3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    over "DarkGraySG" (
                        references = None
                    )
                    {
                    }

                    over "ThrusterSG" (
                        references = None
                    )
                    {
                    }

                    over "SilverMetallicSG" (
                        references = None
                    )
                    {
                    }

                    over "BlackOutSG" (
                        references = None
                    )
                    {
                    }
                }

                over "EngineLeft" (
                    references = None
                )
                {
                }
            }
        }

        def Xform "Hook" (
            active = true
            references = None
        )
        {
            quatf xformOp:orient = (0.7071067, 0.70710677, 0, 0)
            float3 xformOp:scale = (10.000001, 10.000001, 10.000001)
            float3 xformOp:translate = (0, -0.4423322, -0.054780617)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }
}

